#!/usr/bin/env python

import sys
import importlib
import os

# Nuclex SCons libraries
sys.path.append('../../BuildSystem/scons')
nuclex = importlib.import_module('nuclex')
archive = importlib.import_module('archive')

# ----------------------------------------------------------------------------------------------- #

universal_gtest_target_name = 'gtest'
universal_gtestmain_target_name = 'gtest_main'

environment = nuclex.create_cplusplus_environment()

# ----------------------------------------------------------------------------------------------- #
# Step 0: preparatory work

# Fetch the list of headers used when compiling
gtest_headers_file = environment.File('gtest-headers')
gtest_header_files = list(
    filter(len, gtest_headers_file.get_text_contents().split('\n'))
)

# Fetch the list of sources to compile gtest
gtest_sources_file = environment.File('gtest-sources')
gtest_source_files = list(
    filter(len, gtest_sources_file.get_text_contents().split('\n'))
)

# Fetch the list of sources to compile gtest_main
gtestmain_sources_file = environment.File('gtestmain-sources')
gtestmain_source_files = list(
    filter(len, gtestmain_sources_file.get_text_contents().split('\n'))
)

# ----------------------------------------------------------------------------------------------- #
# Step 1: Download the current release

# Fetch the available download URLs from a file
download_url_file = environment.File('gtest-download-urls')
download_urls = list(filter(len, download_url_file.get_text_contents().split('\n')))

# Determine the target filename for the download (below 'downloads' folder)
archive_filename = os.path.basename(download_urls[0])
archive_file = environment.File(os.path.join('downloads', archive_filename))

# Tell SCons how to "produce" the downloaded archive (by calling wget)
#
# If it already exists, we're satisfied with it (under the assumption, that nobody
# would create a different release of the sources under the same file name)
if not archive_file.exists():
    download_archive = environment.Command(
        source = download_url_file,
        #action = 'wget ' + download_urls[0] + ' --output-document=$TARGET',
        action = archive.download_url_in_urlfile,
        target = archive_file
    )

# ----------------------------------------------------------------------------------------------- #
# Step 2: Extract the release into the build directory

def extract_compressed_tarball(target, source, env):
    """Extracts the distribution .tar.gz archive and applies a patch that ensures
    the same headers will work on Windows and average Linux distributions.

    @param  target  Output files, not used by the function but passed along so
                    SCons can look at them and knows its dependency tree
    @param  source  Source files, expected to be an array containing the .tar.gz
                    path and the unified diff path
    @param  env     SCons build environment"""

    archive.extract_compressed_tarball(str(source[0]), 'build', 1)

# Tell SCons how to "produce" the sources & headers (by calling tar)
extract_archive = environment.Command(
    source = archive_file,
    #action = 'tar --extract --gzip --strip-components=1 --file=$SOURCE --directory=build',
    action = extract_compressed_tarball,
    target = gtest_source_files + gtest_header_files + gtestmain_source_files
)

# ----------------------------------------------------------------------------------------------- #
# Step 3: Compile the gtest library

gtest_environment = environment.Clone()

del gtest_environment['SOURCE_DIRECTORY'] # We define the sources ourselves
gtest_environment['HEADER_DIRECTORY'] = 'build/googletest/include'

gtest_environment.add_include_directory('build/googletest')
gtest_environment.add_source_directory(
    'build/googletest/src',
    gtest_source_files,
    scons_issue_2908_workaround_needed = True
)

compile_gtest_library = gtest_environment.build_library(
    universal_gtest_target_name,
    static = True
)

# ----------------------------------------------------------------------------------------------- #
# Step 4: Compile the gtest_main library

gtestmain_environment = environment.Clone()

del gtestmain_environment['SOURCE_DIRECTORY'] # We define the sources ourselves
gtestmain_environment['HEADER_DIRECTORY'] = 'build/googletest/include'

gtestmain_environment.add_include_directory('build/googletest')
gtestmain_environment.add_source_directory(
    'build/googletest/src',
    gtestmain_source_files,
    scons_issue_2908_workaround_needed = True
)

compile_gtestmain_library = gtestmain_environment.build_library(
    universal_gtestmain_target_name,
    static = True
)

# ----------------------------------------------------------------------------------------------- #
# Step 5: Put the header in the main package directory

for header in gtest_header_files:
    if header.startswith('build/googletest/include/'):
        install_path = os.path.join('Include', header[25:])
        environment.Install(install_path, header)

# ----------------------------------------------------------------------------------------------- #
