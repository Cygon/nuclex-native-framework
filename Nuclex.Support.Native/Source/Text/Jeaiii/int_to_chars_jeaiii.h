/*
Copyright (c) 2019 James Edward Anhalt III
https://github.com/jeaiii/itoa/itoa/int_to_chars_jeaiii.h

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#include <cstdint> // for std::uint32_t, std::uint64_t
#include <type_traits> // for std::enable_if
#include <cstring> // for std::memcpy()

struct pair { char t, o; };
#define P(T) { T, '0' }, { T, '1' }, { T, '2' }, { T, '3' }, { T, '4' }, { T, '5' }, { T, '6' }, { T, '7' }, { T, '8' }, { T, '9' }
static const pair s_pairs[] = { P('0'), P('1'), P('2'), P('3'), P('4'), P('5'), P('6'), P('7'), P('8'), P('9') };

#define W(N, I) *(pair*)&b[N] = s_pairs[I]
#define A(N) t = (std::uint64_t(1) << (32 + N / 5 * N * 53 / 16)) / std::uint32_t(1e##N) + 1 + N/6 - N/8, t *= u, t >>= N / 5 * N * 53 / 16, t += N / 6 * 4, W(0, t >> 32)
#define S(N) b[N] = char(std::uint64_t(10) * std::uint32_t(t) >> 32) + '0'
#define D(N) t = std::uint64_t(100) * std::uint32_t(t), W(N, t >> 32)

#define C0 b[0] = char(u) + '0'
#define C1 W(0, u)
#define C2 A(1), S(2)
#define C3 A(2), D(2)
#define C4 A(3), D(2), S(4)
#define C5 A(4), D(2), D(4)
#define C6 A(5), D(2), D(4), S(6)
#define C7 A(6), D(2), D(4), D(6)
#define C8 A(7), D(2), D(4), D(6), S(8)
#define C9 A(8), D(2), D(4), D(6), D(8)

#define L09(F) u < 100        ? L01(F) : L29(F)
#define L29(F) u < 1000000    ? L25(F) : L69(F)
#define L25(F) u < 10000      ? L23(F) : L45(F)
#define L69(F) u < 100000000  ? L67(F) : L89(F)
#define L03(F) u < 100        ? L01(F) : L23(F)

#define L01(F) u < 10         ? F(0) : F(1)
#define L23(F) u < 1000       ? F(2) : F(3)
#define L45(F) u < 100000     ? F(4) : F(5)
#define L67(F) u < 10000000   ? F(6) : F(7)
#define L89(F) u < 1000000000 ? F(8) : F(9)

#define PART(N) (C##N, b += N + 1)
#define LAST(N) (C##N, terminate<RESULT>(b + N + 1))

template<class T> inline T terminate(char* b) { return b; }
template<> inline void terminate<void>(char* b) { *b = 0; }

template<class RESULT = char*, class T, std::enable_if_t<(sizeof(T) <= sizeof(std::uint32_t))>* = nullptr>
inline RESULT int_to_chars_jeaiii(T i, char *b) {
  std::uint64_t t;
  std::uint32_t u = i < 0 ? *b++ = '-', 0u - std::uint32_t(std::int32_t(i)) : std::uint32_t(i);
  return L09(LAST);
}

template<class RESULT = char*, class T, std::enable_if_t<(sizeof(T) == sizeof(std::uint64_t))>* = nullptr>
inline RESULT int_to_chars_jeaiii(T i, char *b) {
  std::uint64_t t;
  std::uint64_t n = i < 0 ? *b++ = '-', 0u - std::uint64_t(i) : std::uint64_t(i);
  std::uint32_t u = std::uint32_t(n);

  if(u == n)
    return L09(LAST);

  std::uint64_t a = n / 100000000u;
  u = std::uint32_t(a);

  if(u == a) {
    L09(PART);
  } else {
    u = std::uint32_t(a / 100000000u);
    L03(PART);
    u = a % 100000000u;
    PART(7);
  }

  u = n % 100000000u;
  return LAST(7);
}

template<class RESULT, class ERROR, ERROR TOO_LARGE, class T>
inline RESULT to_chars_from_int_jeaiii(char *first, char *last, T value) {
  char temp[20];
  auto count = last - first;
  char* next = int_to_chars_jeaiii(value, count < 20 ? temp : first);

  // all integers fit in 20 chars
  if(count < 20) {
    auto n = next - temp;
    if(count < n)
      return { last,  TOO_LARGE };
    memcpy(first, temp, n);
    next = first + n;
  }

  return { next, ERROR{} };
}

#define to_chars_from_int to_chars_from_int_jeaiii<std::to_chars_result, std::errc, std::errc::value_too_large>
